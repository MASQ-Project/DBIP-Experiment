name: ci-matrix

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - master

jobs:
  build:
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: true
      matrix:
        target:
          - { name: linux, os: ubuntu-latest }
          - { name: macos, os: macos-latest }
          - { name: windows, os: windows-latest }

    name: Build node on ${{ matrix.target.os }}
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Stable with rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          components: rustfmt, clippy
          override: true

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/cache/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build ${{ matrix.target.os }}
        run: |
          ./ci/all.sh
          ./ci/multinode_integration_test.sh
          ./ci/collect_results.sh
        shell: bash

      - name: Publish ${{ matrix.target.os }}
        uses: actions/upload-artifact@v4
        with:
          name: Node-${{ matrix.target.name }}
          path: results

  deploy_to_s3:
    needs: build
    strategy:
      matrix:
          os: [linux, macos, windows]
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
          with:
            ref: ${{ github.event.pull_request.head.sha }}

        - uses: actions/download-artifact@v4

        - name: Display structure of downloaded files
          run: ls -R

        - name: Configure AWS CLI
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: 'us-west-2'
          run: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION

        - if: startsWith(github.head_ref, 'GH')
          name: Versioned S3 Sync
          uses: jakejarvis/s3-sync-action@v0.5.1
          with:
           args: --acl private --follow-symlinks --delete
          env:
            AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: 'us-west-2'
            DEST_DIR: 'Node/${{ github.event.workflow_run.head_branch }}/Node-${{ matrix.os }}'
            SOURCE_DIR: 'Node-${{ matrix.os }}/generated/bin/'

        - if: startsWith(github.head_ref, 'v')
          name: Latest S3 Sync
          uses: jakejarvis/s3-sync-action@v0.5.1
          with:
           args: --acl private --follow-symlinks --delete
          env:
            AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: 'us-west-2'
            DEST_DIR: 'Node/latest/Node-${{ matrix.os }}'
            SOURCE_DIR: 'Node-${{ matrix.os }}/generated/bin/'

        - name: Invalidate Binaries CloudFront
          uses: chetan/invalidate-cloudfront-action@v2.4
          env:
            DISTRIBUTION: ${{ secrets.DISTRIBUTION }}
            PATHS: "/Node*"
            AWS_REGION: "us-west-2"
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
